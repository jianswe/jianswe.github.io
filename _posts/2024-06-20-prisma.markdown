# Prisma 
## ORM 
Object-Relational Mapping (ORM) is a term used to describe a technique that allows you to interact with a DB using an object-oriented approach. 

## Prisma Overview 
`npm i prisma --save-dev` Install Prisma as dev dependency.     

`npx prisma init` Initalize Prisma, will create a prisma folder.  

Change `DATABASE_URL` to your database in `.env` file. 

## Schema 
Inside `schema.prisma` file 
```prisma
model User {
  id String  @id @default(uuid())
  createdAt DateTime @default(now())
  
  username String @unique
  password String
  products  Product[]
}

model Product {
  id String  @id @default(uuid())
  createdAt DateTime @default(now())

  name String @db.VarChar(255)
  belongsToId @String
  belongsTo User @relation(fields: [belongsToId], references: [id])
}

model Update {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title   String
  body    String
  status  UPDATE_STATUS @default(IN_PROGRESS)
  version String?
  asset   String?

  productId   String
  product     Product       @relation(fields: [productId], references: [id])
  updatePoints UpdatePoint[]
}
```
`@updatedAt` is needed for updatedAt field to be autofilled. 

## Migrations 
1. Initial migration, apply schema to DB.
2. Update schema. 

`npm i @prisma/client` Install Prisma client as dependency. The actually SDK, which is generated based on schema. 

`npx prisma migrate dev --name init` Sync DB with schema, generate Prisma client. 

## Prisma Client 
Create `src/db.ts`, so we don't need to create a new client for every connection. 
```ts
import { PrismaClient} from '@prisma/client'

const prisma = new PrismaClient()

export default prisma
```
### How to use Prisma client
For example, `src/handlers/user.ts`
```ts
import prisma from '../db'
import { comparePasswords, createJWT, hashPassword } from '../modules/auth'

export const createNewUser = async (req, res) => {
  const user = await prisma.user.create({
    data: {
      username: req.body.username,
      password: await hashPassword(req.body.password) 
    }
  })

  const token = createJWT(user) // Checkout Express Authentication section
  res.json({token})
}
```
